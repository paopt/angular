Ivy是对Angular渲染引擎的完全重写。事实上，这是引擎的第四次重写，也是自 Angular 2 以来的第三次重写。但与重写二和三不同，你甚至可能没有注意到，Ivy承诺对你的应用程序进行巨大的改进。使用 Ivy，您可以更独立地编译组件。这缩短了开发时间，因为重新编译应用程序只涉及编译更改的组件。

常春藤也非常注重摇树。这是 TypeScript 编译器查看您的代码并准确确定需要哪些库，然后消除任何未使用的代码的过程。因此，分布式代码将小得多，应用程序的加载时间将得到改善。


。只需将 Angular 8 应用程序升级到 Angular 9，默认情况下将使用新的渲染管线。在我向您展示的示例中，生成的捆绑包大小减少了 25% 以上。

大量减省编译图（compilation graph），这能简化组建工具，重建大型项目的时间亦能缩短。

允许元编程（meta-programming），能够令component可以在执行期（run time）内创建，Higher Order Components亦能完全实现。

但Ivy将源码分解为更细小、更原子化的function，更有利Tree-Shaking的运用，从而产生更小的bundle。

Template syntax
Dependency injection
Content projection
Structural directives
Life cycle hooks
Pipes
Queries
Listeners


低内存


Ivy 专注于用户，通过让浏览器下载更少的资源，使应用程序启动更快，来提高用户体验。
它通过简化 API 和构建系统来帮助开发人员。
最后，它通过使编译管道更友好来帮助社区，从而为第三方贡献提供了可能性。



Ivy 有很多东西，但 Ivy 背后的一个重要思想就是我们所谓的 “locality”。简而言之，这意味着当编译器翻译模板时，只允许使用对它来说 “local” 的信息。local 意味着只有与组件描述直接关联的信息。这与当前 Angular 渲染管道的全局优化方法形成对比。那么让我们来谈谈 locality 给 Angular 带来的一些好处：
    
        Locality 允许第三方库将预编译模板发送到 NPM。这很重要，因为对于使用这些库的应用程序来说，它将极大地简化和加速编译。
        有了 locality ，AoT / JIT的区别变得很小，几乎消失了。允许一个人自由地混合使用两者，例如在测试和开发中。对于生产，我们仍然只推荐 AoT。
        Locality 不再需要Metadata.json文件。这极大地简化了第三方库的发布和开发以及与现有工具链的互用性。
        Locality 大大修剪了编译图。这允许简化构建工具并更快地重建大型项目。
        而我个人的最爱：Locality 支持元编程。今天，无法在运行时创建组件，Ivy 将成为可能。一个元编程的例子是高阶组件。 （不仅仅是为了让HOC成为可能而倡导HOC。）



要的变化是新系统的设计考虑了 tree-shaking。换句话说，渲染器代码的重写方式使得你未使用的任何 Angular 代码都可以简单地在构建步骤中被 tree-shaking 掉


地方性原则

局部性原则意味着每个组件应该只使用自己的信息进行编译。这有助于实现更快的构建时间。在 Ivy 中编译组件的过程中，Ivy 只需要有关组件本身的信息，除了其可声明依赖项的名称和包名称。Ivy 不需要任何可声明依赖项的额外元数据来编译组件。以前的编译器视图引擎没有此功能。View Engine 需要有关其所有可声明依赖项、其可声明依赖项等的信息才能进行编译，因为它需要对所有代码进行静态分析并生成一个名为metadata.json的文件，该文件可用于生成编译指令。这意味着 Angular 库不能使用 View Engine 进行 AOT 编译。但是，Ivy允许Angular在开发过程中开始使用AOT编译，这在过去仅限于生产构建，因为它需要很长的编译时间。

摇树

常春藤可以实现更小的捆绑包，因为它使用 Ivy 指令集。常春藤指令集是一组可摇树的运行时渲染指令。我们的捆绑包将仅包含项目所需的说明。

但是，重要的是要知道，View Engine 和 Ivy 之间的捆绑包大小差异将根据我们的应用程序的大小和项目中使用的第三方库而有所不同。


地区
局部性是 Angular 团队必须简化开发人员生活的原则。基本上，这意味着每个组件应该只使用自己的信息进行编译。这在热重载时变得非常方便，因为它只会编译您更改的组件。截至目前，当您对组件进行更改时，它不仅会重新构建自身，还会重新构建其父组件，因为它还保存该信息的副本。
局部性的另一个次要影响是在运行时创建指令或组件的能力。


（元编程或更高阶组件，延迟加载组件而不是模块，不基于区域的新更改检测系统.js...

AOT 编译


即时 （JIT） 编译是以前版本的Angular 中的默认编译机制，浏览器将通过该机制下载编译器并构建应用程序。但是，此过程效率低下，因为它速度慢并且给浏览器带来了负担。